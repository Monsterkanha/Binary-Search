Logic:
We need to define a isPossible() function that checks if a distance x is possible between each of the cows. We can use a greedy approach here by placing cows at the leftmost possible stalls such that they are at least x distance away from the last-placed cow.
We need to sort the given array/list so once we have our sorted array to do the greedy task then we can apply the Binary Search algorithm on the sorted input, and use our function isPossible( ) to find the largest distance possible.


Steps are as follows :
First of all, consider low and high values for the starting and ending positions of the given array/list or just take low=0 and high = ending position (anything it really does not matter ...you can eve take low=0 and high=100000 any large no ...eventually binary search will eliminate the extra range by removing their left half or right half)
Let mid be the minimum distance. Check in the sorted array how many positions are available so that the minimum distance between them is this mid.


Now how to do that?
Start with the least value in the array and keep ignoring all the elements until you get a difference between the lower element and the current element >= mid or you run out of elements.
Use this idea to find the count of such possible positions. Now if this count is >= c then we already have a possible solution so store it and we now eliminate it from our search space by making low as mid+1, otherwise, we don't store the result as it is not our solution and eliminate it from our search space by making high as mid-1.
Now our only objective is to find the maximum from all the results we have stored until our search space has exhausted.



isvalid, we will greedily place if we get lesser than required division then we have to decrease distance means move left.
else we got to distribute, now we will go for increasing distance.

bool isvalid(VI& pos, int mid, int c){
    int cow = 1;
    int last = pos[0];
    for(int i = 1; i < pos.size(); i++){
        if(pos[i] - last >= mid){
            cow++;
            last = pos[i];
        }
        if(cow >= c){
            return true;
        }
    }
    return false;
}
void solve(){
    int n,c;
    cin>>n>>c;
    VI pos(n);
    rep(i , 0 , n){
        cin>>pos[i];
    }
    if(c > n){
        cout<<-1<<nl;
    }
    sort(all(pos));
    // debug(pos);
    int low = 1 , high = pos[n-1] - pos[0] , ans =-1 ;
    while(low <= high){
        int mid = low + (high- low)/2;
        if(isvalid(pos,mid,c)){
            ans = mid;
            // cout<<ans<<" ";
            low = mid + 1;
        }
        else high = mid -1;
    }
    cout<<ans<<nl;
}
