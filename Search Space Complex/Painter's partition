Here, similar to allocate books, 
max of all element is our minimum time possible, and sum of all is our maximal answer.
so do binary search, think if at this time to complete the task how many workers would require, no painter will do more than this mid,
if it says more painter are required then return false, so we need to increase the time.
else they can complete the task now we need to reduce the time.

int mod = 10000003;
bool isvalid(vector<int>& arr , int n , int mid , int k){
    int painter = 1;
    long long sum = 0;
    for(int i = 0 ; i < n ;i++){
        (sum += arr[i])%= mod;
        if(sum > mid){
            painter++;
            sum = arr[i];
        }
        if(painter > k){
            return false;
        }
    }
    return true;
}

int Solution::paint(int A, int B, vector<int> &arr) {
    int  maxi = -1;
    long long sum = 0 ;
    int n = arr.size();
    for(int i = 0 ; i < n ; i++){
        maxi = max(maxi , arr[i]);
        (sum += arr[i])%= mod;
    }
    long long low = maxi ,high = sum , ans = high;
    while(low <= high){
        long long mid = low  + (high - low)/2;
        if(isvalid(arr, n ,mid, A)){
            ans = (mid)%mod;
            high = mid-1;
        }
        else low = mid + 1;
    }
    return (ans*1LL*B)%mod;
}
