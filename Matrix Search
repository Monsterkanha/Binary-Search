1. Search the row which could posses the result and then binary search on that row to find answer.
If A[mid][0] <= B <= A[mid][m-1] then mid is needed row.
if (A[mid][m-1] < B) then move to right since this and below will not needed.

else move to left.  // A[mid][0] > B

int Solution::searchMatrix(vector<vector<int> > &A, int B) {
    int n = A.size() , m = A[0].size();
    int l = 0 , h = n-1, mid;
    while(l <= h){
        mid = l + (h-l)/2;
        if(A[mid][0] == B || A[mid][m-1] == B) return 1;
        if(A[mid][0] <= B && A[mid][m-1] >= B) break;
        else if(A[mid][m-1] < B) l = mid + 1;
        else if(A[mid][0] > B) h = mid - 1;
    }
    int low = 0, high = m-1;
    while(low <= high){
        int nmid = low + (high-low)/2;
        if(A[mid][nmid] == B) return 1;
        else if(A[mid][nmid] > B) high = nmid -1;
        else low = nmid + 1;
    }
    return 0;
}




2. int start = 0 , end = n*m -1;
and to calculate x, y of mid 
x = mid/M, y = mid%m;
calculate how many times coloumn have been filled that is x and remaining is y.
Then do simple binary search.

int Solution::searchMatrix(vector<vector<int> > &A, int B) {
    int n = A.size() , m = A[0].size();
    int low = 0 , high = n*m-1;
    while(low <= high){
        int mid = low + (high-low)/2;
        int x = mid/m, y = mid%m;
        if(A[x][y] == B) return 1;
        if(A[x][y] < B) low = mid + 1;
        else high = mid -1;
    }
    return 0;
}
