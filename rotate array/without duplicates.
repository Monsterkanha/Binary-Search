Here, assume you are at mid point 
Either l to mid is sorted which means A[l] < A[mid] then we can reduce search space according to this. 
Else mid to r is sorted then which means we can reduce search space according to that.

int Solution::search(const vector<int> &A, int B) {
    int n = A.size(), l = 0, r = n-1;
    while(l <= r){
        int mid = l + (r - l)/2;
        if(A[mid] == B) return mid;
        
        if(A[mid] > A[l]){
            if(B >= A[l] && B <= A[mid]){
                r = mid - 1;
            }
            else{
                l = mid + 1;
            }
        }
        else{
            if(B >= A[mid] && B <= A[r]){
                l = mid + 1;
            }
            else{
                r = mid - 1;
            }
        }
    }
    return -1;
}

// Either left one is sorted or the right one is sorted try to reduce search space based on that.
